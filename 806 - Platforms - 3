#include <bits/stdc++.h>
#include <algorithm>
typedef long long int lli;
using namespace std;
lli Calculate(int a, int b){
    return (a - b) * (a - b);
}
lli func(vector<lli>& platform){
    lli s = platform.size();
    vector<lli> dp(s);
    lli i;
    dp[1] = Calculate(platform[0], platform[1]);
    dp[0] = 0;
    if (s > 2){
        dp[1] = min(dp[1], 3 * Calculate(platform[0], platform[2]) + Calculate(platform[2], platform[1]));
    }
    for (i = 2; i < s - 1; ++i){
        dp[i] = min(dp[i - 1] + Calculate(platform[i - 1], platform[i]), dp[i - 2] + 3 * Calculate(platform[i - 2], platform[i]));
        dp[i] = min(dp[i], dp[i - 1] + 3 * Calculate(platform[i - 1], platform[i + 1]) + Calculate(platform[i + 1], platform[i]));
    }
    i = s - 1;
    dp[i] = min(dp[i - 1] + Calculate(platform[i - 1], platform[i]), dp[i - 2] + 3 * Calculate(platform[i - 2], platform[i]));
    return dp[i];
}
int main(){
    lli n;
    cin >> n;
    vector<lli> platform(n);
    for (lli i = 0; i < n; ++i) cin >> platform[i];
    cout << func(platform);
    return 0;
}
