#include <iostream>
using namespace std;
typedef struct{
    int hour, minute, second;
}Time;
bool func(Time a, Time b){
    if (a.hour == b.hour && a.minute == b.minute) return a.second > b.second;
    if (a.hour == b.hour) return a.minute > b.minute;
    return a.hour > b.hour;
}
void merge(Time arr[], int low,int middle, int high){
    int left = low, right = middle + 1, k = 0;
    Time temp[high - low + 1];
    while (left <= middle && right <= high){
        if (func(arr[left], arr[right])){
            temp[k].hour = arr[right].hour;
            temp[k].minute = arr[right].minute;
            temp[k++].second = arr[right++].second;
        }else{
            temp[k].hour = arr[left].hour;
            temp[k].minute = arr[left].minute;
            temp[k++].second = arr[left++].second;
        } 
       
    }
    while (left <= middle){
        temp[k].hour = arr[left].hour;
        temp[k].minute = arr[left].minute;
        temp[k++].second = arr[left++].second;
    }
    while (right <= high){
        temp[k].hour = arr[right].hour;
        temp[k].minute = arr[right].minute;
        temp[k++].second = arr[right++].second;
    }
    for (int i = low; i <= high; ++i){
        arr[i].hour = temp[i - low].hour;
        arr[i].minute = temp[i - low].minute;
        arr[i].second = temp[i - low].second;
    }
}


void mergeSort(Time arr[], int low, int high){
    if (low >= high) return;
    int middle = (low + high) / 2;
    mergeSort(arr, low, middle);
    mergeSort(arr, middle + 1, high);
    merge(arr, low, middle, high);
}


int main(){
    int n;
    cin >> n;
    Time arr[n];
    for (int i = 0; i < n; ++i)
        cin >> arr[i].hour >> arr[i].minute >> arr[i].second;
    mergeSort(arr, 0, n - 1);
    for (int i = 0; i < n; ++i)
        cout << arr[i].hour << " " << arr[i].minute << " " << arr[i].second << endl;
    
    
    
    
    return 0;
}
